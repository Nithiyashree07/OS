#include <stdio.h>
#include <pthread.h>

#define NUM_ITERATIONS 1000000

int counter = 0;             // Shared resource
pthread_mutex_t mutex;       // Mutex lock

void* increment(void* arg) {
    for (int i = 0; i < NUM_ITERATIONS; i++) {
        pthread_mutex_lock(&mutex);   // Lock critical section
        counter++;                    // Critical section: increment counter
        pthread_mutex_unlock(&mutex); // Unlock critical section
    }
    return NULL;
}

int main() {
    pthread_t t1, t2;

    // Initialize mutex
    pthread_mutex_init(&mutex, NULL);

    // Create two threads
    pthread_create(&t1, NULL, increment, NULL);
    pthread_create(&t2, NULL, increment, NULL);

    // Wait for threads to finish
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    // Destroy mutex
    pthread_mutex_destroy(&mutex);

    printf("Final counter value: %d\n", counter);

    return 0;
}
